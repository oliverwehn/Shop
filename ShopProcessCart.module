<?php

class ShopProcessCart extends Process implements Module, ConfigurableModule {
		
	protected $field_name = 'shop_process';	// name of the process field used for the cart process
	protected $template_name = "shop_cart"; // name or prefix of the templates used for cart related pages
    protected $delete_after = 30; // days guest carts are saved
    
    /**
     * Session vars used (naming determined by $template_name)
     * shop_cart_cleanedup: 0 or 1. Is set, when old guest carts have been cleand up.
     * shop_cart_refreshed: 0 or 1. Is set, when a user returns and the cart items are checked in view of availability an price.
     */
    
    // cart page
    var $cart = null;
	
	public static function getModuleInfo() {
		return array(
			'title' => 'Shop: '.__('Cart Process', __FILE__),
			'summary' => __('Provides shopping cart functionality', __FILE__),
			'version' => 001,
			'permanent' => false,
			'singular' => true,
			'permission' => 'shop-order',
			'requires' => array()
		);
	}
		
	public function init() {
        $guest = $this->users->get($this->config->guestUserPageID);
        $cookie_name = $this->template_name.'_identifier';
        if($this->user->id != $guest->id) {
            $cart = $this->pages->get('template='.$this->template_name.'_user, '.$this->template_name.'_user='.$this->user->id);
            if($cart->id) {
                $this->cart = $cart;
            } else {
                if(($this->input->cookie->$cookie_name) && (strlen($this->input->cookie->$cookie_name) == 32)) {
                    $cart = $this->pages->get('template='.$this->template_name.', '.$this->template_name.'_user=NULL, '.$this->template_name.'_identifier='.$this->input->cookie->$cookie_name);
                    if($cart->id) {
                        $cart->set($this->template_name.'_user', $this->user->id);
                        $cart->title = 'User '.$this->user->id;
                        $cart->name = $this->fuel('sanitizer')->pageName($cart->title, $cart->settings['name']);
                        $cart->save();
                        $this->cart = $cart;
                    }
                    setcookie ($this->template_name.'_identifier', "", time()-86400, "/");
                }
                if($this->cart === NULL) {
                    $cart_parent = $this->pages->get('template='.$this->template_name);
                    if($cart_parent->id) {
                        $identifier = md5($this->user->id.'_'.date('Y.m.d_H:i:s'));
                        $cart = new Page($this->templates->get($this->template_name.'_user'));
                        $cart->parent = $cart_parent;
                        $cart->title = 'User '.$this->user->id;
                        $cart->name = $this->fuel('sanitizer')->pageName($cart->title, $cart->settings['name']);
                        $cart->set($this->template_name.'_user', $this->user->id);
                        $cart->set($this->template_name.'_identifier', $identifier);
                        $cart->save();
                        $this->cart = $cart;
                    } else {
                        throw new WireException('Wasn’t able to locate cart parent page.');
                    }
                }
            }
        } else {
            if(($this->input->cookie->$cookie_name) && (strlen($this->input->cookie->$cookie_name) == 32)) {
                $cart = $this->pages->get('template='.$this->template_name.'_user, '.$this->template_name.'_user=, '.$this->template_name.'_identifier='.$this->input->cookie->$cookie_name);
                echo "<br />".$cart->id;
                if($cart->id) {
                    $this->cart = $cart;
                } else {
                    setcookie ($this->template_name.'_identifier', "", time()-86400, "/");
                }
            } 
            if($this->cart === NULL) {
                $cart_parent = $this->pages->get('template='.$this->template_name);
                if($cart_parent->id) {
                    $identifier = md5(rand().'_'.date('Y.m.d_H:i:s'));
                    $cart = new Page($this->templates->get($this->template_name.'_user'));
                    $cart->parent = $cart_parent;
                    $cart->title = 'Guest';
                    $cart->name = $this->fuel('sanitizer')->pageName($identifier, $cart->settings['name']);
                    $cart->set($this->template_name.'_identifier', $identifier);
                    $cart->save();
                    $cart->name = $this->fuel('sanitizer')->pageName($cart->title.'_'.$cart->id, $cart->settings['name']);
                    $cart->save();
                    $this->cart = $cart;
                    setcookie ($this->template_name.'_identifier', $identifier, time()+365*86400, "/");
                } else {
                    throw new WireException('Wasn’t able to locate cart parent page.');
                } 
            }
        }echo "<h1>".$cart->name."</h1>";
	}

    
	
	static public function getModuleConfigInputfields(Array $data) {
		// get modules, fields, templates
		$modules = Wire::getFuel('modules');
		$fields = Wire::getFuel('fields');
		$templates = Wire::getFuel('templates');
		// this is a container for fields, basically like a fieldset
		$inputfields = new InputfieldWrapper();
		 		
		return $inputfields;
	}
	
	public function ___execute() {
		$selector = "";
		if(count($this->allowed_templates)) {
			$selector .= "template=".implode("|", $this->allowed_templates);
		}
		if($this->input->urlSegment1) {
			$segments = array();
			$i = 1;
			$segment = 'urlSegment'.$i;
			while($str = $this->input->$segment) {
				$field_name = 'segment_field_'.$i;
				if(!empty($this->$field_name)) {
					$field = $this->fields->get($this->$field_name);
					if($value = $this->transformValue(&$field, $str)) {
						$selector .= ", ".$field->name."=".$value;
						$i++;
						$segment = 'urlSegment'.$i;
					}
				} else {
					break;
				}
			}
		}
        // use the opportunity to delete old guest carts 
        if($this->session->get($this->template_name.'_cleanedup')) {
            $this->deleteGuestCarts();
            $this->session->set($this->template_name.'_cleanedup', 1);
        }        
		return $this->page->children($selector);
	}
	
	public function ___executeAdd() {
		$product_id = (int) $this->input->post->product_id;
        $qty = (int) $this->input->post->qty;
        $product = $this->pages->get($product_id);
		if($product->id) {
			echo $product->title;
		} else {
			$this->message($this->_('Wasn’t able to add product to cart because of invalid product ID.'));
		}
		
	}
    
    private function deleteGuestCarts() {
        $older_than = time() - ($this->delete_after * 86400);
        $carts = $this->pages->find('template='.$this->template_name.'_user, '.$this->template_name.'_user=, created<'.$older_than);
        echo "<br />".count($carts)."<br />";
        $deleted = 0;
        foreach($carts as $cart) {
            if($this->pages->delete($cart, true)) {
                $deleted++;
            }
        }
        return $deleted; 
    }
	
	public function ___install() {
		$pages = $this->fuel('pages');
		$fields = $this->fuel('fields');
		$modules = $this->fuel('modules');
		$templates = $this->fuel('templates');
        
		// check for shop_process field and create if not existing
		$field = $fields->get($this->field_name);
		if(!$field->id) {
			$field = new Field();	
			$field->type = $this->fuel('modules')->get("FieldtypeModule"); 
			$field->name = $this->field_name;
			$field->label = 'Shop: Process';
			$field->moduleTypes = array('Process');
			$field->instantiateModule = true;
			$field->flags = Field::flagSystem;
			$field->save();
			$this->message("Created field: ".$field->name);
		} else {
			$this->message("Field ".$this->field_name." is already set up");
		} 
		// cart template fieldgroup
		$fieldgroup = new Fieldgroup();
		$fieldgroup->name = $this->template_name;
		$fieldgroup->add($fields->get('title'));
		$fieldgroup->add($field);
		$fieldgroup->save();
		// cart template
		// create the template used by Language pages
		$template = new Template();	
		$template->name = $this->template_name;
		$template->slashUrls = 1; 
		$template->pageLabelField = 'title';
		$template->noGlobal = 1; 
		$template->noMove = 1; 
		$template->noTrash = 1; 
		$template->noUnpublish = 1; 
		$template->noChangeTemplate = 1; 
		$template->nameContentTab = 1; 
		$template->urlSegments = 1;
		$template->flags = Template::flagSystem;
		$template->fieldgroup = $fieldgroup; 
		$template->save();
		$this->message('Created template: '.$template->name);
		// cart page
		$cart = new Page($template);
		$cart->name = 'cart';
		$cart->title = 'Shopping Cart';
		$cart->shop_process = $this;
		$cart->parent = $pages->get('/');
		$cart->status = Page::statusSystem;	
		$cart->save();
		$this->message('Created page: '.$cart->path);

        // cart user template for user cart pages
        $template_user = new Template(); 
        $template_user->name = $this->template_name.'_user';        
        $fieldgroup = new Fieldgroup();
        $fieldgroup->name = $template_user->name;
        $fieldgroup->add($fields->get('title'));
        // user page reference
        $field = new Field();
        $field->type = $modules->get('FieldtypePage');
        $field->name = $this->template_name.'_user';
        $field->label = 'Shop: Cart User Page Reference';
        $field->flags = Field::flagSystem;
        $field->template_id = $templates->get('user')->id;
        $field->derefAdPage = 1; 
        $field->save();
        $fieldgroup->add($field);       
        $this->message("Created field: ".$this->template_name.'_user');
        // cookie identifier
        $field = new Field();
        $field->type = $modules->get('FieldtypeText');
        $field->name = $this->template_name.'_identifier';
        $field->label = 'Shop: Cart Identifier String';
        $field->flags = Field::flagSystem;
        $field->maxlength = 32; 
        $field->save();
        $fieldgroup->add($field);       
        $this->message("Created field: ".$this->template_name.'_identifier');        
        // cart user template
        $template_user->slashUrls = 1; 
        $template_user->pageLabelField = 'title';
        $template_user->noGlobal = 1; 
        $template_user->noMove = 1; 
        $template_user->noTrash = 1; 
        $template_user->noUnpublish = 1; 
        $template_user->noChangeTemplate = 1; 
        $template_user->nameContentTab = 1; 
        $template_user->urlSegments = 1;
        $template_user->flags = Template::flagSystem;
        $template_user->fieldgroup = $fieldgroup; 
        $template_user->parentTemplates = array($templates->get($this->template_name)->id);
        $template_user->childTemplates = array($templates->get($this->template_name.'_item')->id);        
        $template_user->save();
        $this->message('Created template: '.$template_user->name);

		// cart item template fieldgroup
		$fieldgroup = new Fieldgroup();
		$fieldgroup->name = $this->template_name.'_item';	
		$fieldgroup->add($fields->get('title'));			
		// cart item product field
		$field = new Field();	
		$field->type = $modules->get("FieldtypePage"); 
		$field->name = $this->template_name.'_product';
		$field->label = 'Shop: Cart Product Page Reference';
		$field->flags = Field::flagSystem;
		$field->save();
		$fieldgroup->add($field);		
		$this->message("Created field: ".$template->name.'_product');
		// cart item options field
		$field = new Field();
		$field->type = $modules->get("FieldtypeText"); 
		$field->name = $this->template_name.'_options';
		$field->label = 'Shop: Cart Product Options';
		$field->flags = Field::flagSystem;
		$field->save();
		$fieldgroup->add($field);
		$this->message("Created field: ".$template->name.'_options');		
		$fieldgroup->save();
		// cart template
		$template_item = new Template();	
		$template_item->name = $this->template_name.'_item';
		$template_item->slashUrls = 1; 
		$template_item->pageLabelField = 'name';
		$template_item->noGlobal = 1; 
		$template_item->noMove = 1; 
		$template_item->noTrash = 1; 
		$template_item->noUnpublish = 1; 
		$template_item->noChangeTemplate = 1;
		$template_item->noChildren = 1; 
		$template_item->nameContentTab = 1; 
		$template_item->flags = Template::flagSystem;
		$template_item->fieldgroup = $fieldgroup;
		$template_item->parentTemplates = array($template_user->id); 
		$template_item->save();
		$this->message('Created template: '.$template_item->name);
		// config cart template
		$template->childTemplates = array($template_user->id);
		$template->save();
	}
	
	public function ___uninstall() {
		$fields = $this->fuel('fields');
		$fieldgroups = $this->fuel('fieldgroups');
		$templates = $this->fuel('templates');
		$pages = $this->fuel('pages');
		// delete pages
		$cart = $pages->get('template='.$this->template_name);
		if($cart->id) {
			$cart->status = Page::statusSystemOverride;
			$cart->status = 0;
			$cart->save();
			$pages->delete($cart, true);
		}
		// delete templates && field groups
		$template_names = array(
			$this->template_name,
			$this->template_name.'_item'
		);
		foreach($template_names as $template_name) {
			$template = $templates->get($template_name);
			if($template->name) {
				$template->flags = Field::flagSystemOverride;
				$template->flags = 0;
				$template->save();			
				if($templates->delete($template)) {
					$fieldgroups->delete($fieldgroups->get($template_name));
				}
			}
		}
		
		// delete fields
		$fieldnames = array(
			$this->field_name,
			$this->template_name.'_product',
			$this->template_name.'_options'
		);
		foreach($fieldnames as $fieldname) {
			$field = $fields->get($fieldname);
			if($field->id && count($pages->find($fieldname.'>=null')) == 0) {
				$name = $field->id;
				$field->flags = Field::flagSystemOverride;
				$field->flags = 0;
				$field->save();				
				$fields->delete($field);
				$this->message("Deleted field: ".$name);
			} else {
				$this->message("Left field ".$fieldname." because it’s still in use");
			}
		}		
	}	
}
